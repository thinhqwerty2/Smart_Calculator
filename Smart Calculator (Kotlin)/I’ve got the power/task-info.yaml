type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    import java.util.*


    fun main() {
        Controller().start()
    }
  learner_created: false
- name: src/calculator/Command.kt
  visible: true
  text: |-
    package calculator

    public class Command() {
        companion object {
            fun handle(input: String) {
                when(input){
                    "/exit"-> Controller.Exit.noExit=false
                }
            }

            private fun helpCommand() {
                println("The program calculates the sum of numbers")
            }

            private fun exitCommand() {
                println("Bye!")
            }
        }
    }
  learner_created: false
- name: src/calculator/Calculator.kt
  visible: true
  text: |
    package calculator

    import java.util.*

    object Calculator {
        val mapVariable= mutableMapOf<String,Int>()

        fun calc(input: List<String>): Int? {
            val number= Stack<Int>()
            val operator=Stack<String>()
            number.push(input[0].toInt())
            for(idx in 1 until input.size){
                if(input[idx] !in "+-"){
                    when(operator.pop()){
                        "+"-> number.push(number.pop()+input[idx].toInt())
                        "-" ->number.push(number.pop()-input[idx].toInt())
                    }
                } else{
                    operator.push(input[idx])
                }
            }
            return number.pop()
        }

        fun createVar(input: String) {
            val temp=Input.Instance.cleanVar(input)
            mapVariable[temp.first] = temp.second
        }
        fun printVar(input:String){
            println("${mapVariable[input]}")
        }

        fun handleExpression(input: String) {
            TODO("Not yet implemented")
        }


    }
  learner_created: false
- name: src/calculator/Controller.kt
  visible: true
  text: |-
    package calculator

    import java.util.*

    class Controller {
        object Exit{
        var noExit=true

        }

        fun start() {
            val sc = Scanner(System.`in`)
            while (Exit.noExit) {
                val input = sc.nextLine().replace("\\s".toRegex(),"")
                println(input)
                val rs = 0
                when {
                    Regex("/.+").matches(input) -> Command.handle(input)
                    input == "" -> continue
                    Regex("[a-zA-Z]+=[a-zA-Z0-9]+").matches(input) -> Calculator.createVar(input)
                    Regex("^[a-zA-Z]+$").matches(input)->Calculator.printVar(input)
                    else -> Calculator.handleExpression(input)

                }
            }
        }


    }
  learner_created: false
- name: src/calculator/Input.kt
  visible: true
  text: |-
    package calculator

    import java.util.*

    class Input {
        object Instance {
            fun cleanVar(input: String): Pair<String, Int> {
                val idxOfEqual: Int = input.indexOf('=')
                return Pair(input.substring(0, idxOfEqual), input.substring(idxOfEqual + 1).toInt())
            }

        }


        fun handleInput(s: String): List<String> {
            return infixToPostfix(handleOperator(s))
        }

        fun handleOperator(s: String): String {
            var count = 0
            if (s[s.lastIndex] in "+-/*") {
                throw Exception()
            }
            for (i in s.indices) {
                if (s[i] in "+-") {
                    count++
                }
            }
            var new = s
            repeat(count) {
                new = new
                    .replace(Regex("--"), "+")
                    .replace(Regex("\\++"), "+")
                    .replace(Regex("-+"), "-")
                    .replace(Regex("\\+-"), "-")
            }
            return if (new[0] in "+-") "0$new" else new
        }

        private fun infixToPostfix(s: String): List<String> {
            val rs = Stack<String>()
            val pattern = Regex("[+-/*]|[0-9]+")
            val tokens = pattern.findAll(s).map { it.value }.toList()
            return tokens
            for (token in tokens) {
                if (token !in "+-/*") {

                }
            }
            return rs
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Expression.kt
  visible: true
  text: |-
    package calculator

    class Expression(val type:String,var value:Int) {

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7815#comment
status: Failed
feedback:
  message: "Exception in test #3\n\njava.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat calculator.Input$Instance.infixToPostfix(Input.kt:102)\n\tat calculator.Calculator.handleExpression(Calculator.kt:15)\n\
    \tat calculator.Controller.start(Controller.kt:20)\n\tat calculator.MainKt.main(Main.kt:7)\n\
    \tat calculator.MainKt.main(Main.kt)\n\nPlease find below the output of your program\
    \ during this failed test.\nNote that the &#39;&gt;&#39; character indicates the\
    \ beginning of the input line.\n\n---\n\n&gt; 7 + 3 * ((4 + 3) * 7 + 1) - 6 /\
    \ (2 + 1)"
  time: "Tue, 04 Apr 2023 11:03:24 UTC"
record: -1
